{
  "metrics": {
    "wmc": 4,
    "lcom": 0,
    "efferentCoupling": -1,
    "cyclomaticComplex": 2,
    "cognitiveComplex": 3,
    "afferentCoupling": 0
  },
  "problem": "The Switch class directly depends on the concrete LightBulb implementation, violating the Dependency Inversion Principle. This tight coupling makes it difficult to extend or replace the LightBulb with other types of devices without modifying the Switch class. Such design reduces flexibility and testability, as the high-level module (Switch) depends on a low-level module (LightBulb) instead of abstractions.",
  "solution": "To comply with DIP, the Switch should depend on an abstraction, such as an interface (e.g., Switchable), which defines the operations like turnOn() and turnOff(). The LightBulb would implement this interface, and the Switch would receive a Switchable instance via constructor injection or setter injection. This decouples the Switch from concrete implementations, enhancing modularity, extensibility, and testability."
}