{
  "metrics": {
    "wmc": 41,
    "lcom": 272,
    "efferentCoupling": 5,
    "cyclomaticComplex": 20,
    "cognitiveComplex": 43,
    "afferentCoupling": 8
  },
  "problem": "The `SystemManager` class is a classic **God Class**, violating the **Single Responsibility Principle (SRP)** and suffering from:\n\n1. **High Weighted Method Count (WMC = 41)**: Too many methods indicate the class is doing far more than one cohesive job.\n2. **High Lack of Cohesion (LCOM = 272)**: Confirms methods interact with disjoint sets of fields, revealing fragmented responsibilities.\n3. **Multiple Responsibilities**: The class handles user management, product inventory, logging, revenue tracking, system backup, maintenance, and email queueing — all unrelated domains.\n4. **Low Reusability and Maintainability**: Changes in one domain (e.g., email logic) can inadvertently affect others (e.g., inventory), increasing the risk of regression.\n5. **Security and Code Smells**: Hardcoded default passwords and inline email queueing logic further reduce the robustness and safety of the design.",
  "solution": "Refactor `SystemManager` into separate classes, each with a clearly defined responsibility. Suggested decomposition:\n\n1. **UserService** – Manages user registration, authentication, and validation.\n2. **InventoryService** – Handles product storage, stock updates, and sales.\n3. **RevenueService** – Calculates and tracks total revenue and sales reports.\n4. **LogService** – Centralizes logging and log archiving.\n5. **BackupService** – Manages system backup tasks and last backup timestamps.\n6. **MaintenanceService** – Toggles maintenance mode and notifies users.\n7. **EmailQueueService** – Handles queueing and dispatching emails based on priority.\n\nAdditionally:\n- Use dependency injection to decouple services.\n- Create meaningful interfaces for testing and modular development.\n- Apply the **Observer pattern** or **Event Bus** to manage system-wide events like log entries or email dispatches.\n\nThis refactoring will significantly improve maintainability, testability, and scalability while reducing the cognitive load and risk of changes."
}