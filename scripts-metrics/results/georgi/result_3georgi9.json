{
  "metrics": {
    "wmc": 6,
    "lcom": 15,
    "efferentCoupling": -1,
    "cyclomaticComplex": 1,
    "cognitiveComplex": 0,
    "afferentCoupling": 0
  },
  "problem": "The ReportGenerator class suffers from poor cohesion by handling a wide range of unrelated responsibilities — from data fetching and report formatting to emailing, printing, and archiving. Cohesion refers to how closely related and focused the responsibilities of a class are. Low cohesion, as seen here, leads to bloated, hard-to-maintain code where changes in one responsibility may unintentionally affect others. It also makes the class difficult to test and violates the Single Responsibility Principle.",
  "solution": "To improve cohesion, the class should be split into smaller, well-defined components, each focusing on a specific task — such as DataFetcher, ReportFormatter, EmailService, PrinterService, and Archiver. This modular approach enhances maintainability, readability, and testability while ensuring that each class does one thing well, adhering to clean code and design principles."
}